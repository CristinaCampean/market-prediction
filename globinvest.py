# -*- coding: utf-8 -*-
"""Globinvest-Trading-Stock-Price-Model .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vj4W8Z5_o5_g-Im5PLWrWHzNaBVXGuSz

Problem Statement

To predict the volatility of intraday stock market considering various parameters.

Import
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import datetime as dt
from datetime import datetime
from pandas import Series
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')
plt.show()

df = pd.read_csv("./ComparareFonduri-2.csv")

df.head(10)

data = df[['Data Fdi Transilvania','Fdi Transilvania','Data Fdi Napoca','Fdi Napoca','Data Fdi SanoGlobinvest','Fdi SanoGlobinvest']]

data.info()

data['Data Fdi Transilvania'] = data['Data Fdi Transilvania'].apply(pd.to_datetime)
data.head()

import numpy as np
import math
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

from datetime import datetime
my_year = 2023
my_month = 12
my_day = 21

test_date = datetime(my_year, my_month, my_day)
test_date

test_date = datetime(my_year, my_month, my_day)
print('The day is : ', test_date.day)
print('The month is : ', test_date.month)

print(data.index.max())
print(data.index.min())

# Earliest date index location
print('Earliest date index location is: ',data.index.argmin())

# Latest date location
print('Latest date location: ',data.index.argmax())

df_vwap = df[['Data','Fdi Transilvania']]
df_vwap['Data'] = df_vwap['Data'].apply(pd.to_datetime)
df_vwap.head()

df.rename(columns={"Data Fdi Transilvania": "Data"}, inplace=True)

df

df_vwap['year'] = df_vwap.Data.dt.year
df_vwap['month'] = df_vwap.Data.dt.month
df_vwap['day'] = df_vwap.Data.dt.day
df_vwap['day of week'] = df_vwap.Data.dt.dayofweek

#Set Date column as the index column.
df_vwap.set_index('Data', inplace=True)
df_vwap.head()

# Visualising the Fdi Transilvania

plt.figure(figsize=(16,8))
plt.plot(df_vwap['Fdi Transilvania'], label='Fdi Transilvania')
plt.title('Time Series')
plt.xlabel("Time(year)")
plt.ylabel("Volume Weighted Average Price")
plt.legend(loc='best')

# Yearly Fdi Transilvania of Maruti Stocks

df_vwap.groupby('year')['Fdi Transilvania'].mean().plot.bar()

# Monthly Fdi Transilvania of Maruti Stocks

df_vwap.groupby('month')['Fdi Transilvania'].mean().plot.bar()

# Daily Fdi Transilvania of Maruti Stocks

df_vwap.groupby('day')['Fdi Transilvania'].mean().plot.bar()

df_vwap.groupby('day of week')['Fdi Transilvania'].mean().plot.bar()

df_vwap.resample(rule = 'A').mean()[:5]

df_vwap['Fdi Transilvania'].resample('A').mean().plot(kind='bar',figsize = (10,4))
plt.title('Yearly Mean Fdi Transilvania for Maruti')

"""Time Shifting
Sometimes, we may need to shift or move the data forward or backwards in time. This shifting is done along a time index by the desired number of time-frequency increments.Here is the original dataset before any time shifts.

Forward Shifting
To shift our data forward, we will pass the desired number of periods (or increments) through the shift() function, which needs to be positive value in this case. Let's move our data forward by one period or index, which means that all values which earlier corresponded to row N will now belong to row N+1. Here is the output:
"""

df_vwap.shift(1).head()

"""Backwards shifting
To shift our data backwards, the number of periods (or increments) must be negative.

"""

df_vwap.shift(-1).head()

"""The opening amount corresponding to 2003-01-12 is now 58.0909

Shifting based off time string code
We can also use the offset from the offset table for time shifting. For that, we will use the pandas shift() function. We only need to pass in the periods and freq parameters. The period attribute defines the number of steps to be shifted, while the freq parameters denote the size of those steps.

Let’s say we want to shift the data three months forward:
"""

df_vwap.tshift(periods=3, freq = 'M').head()

"""Rolling windows
Time series data can be noisy due to high fluctuations in the market. As a result, it becomes difficult to gauge a trend or pattern in the data. Here is a visualization of the Amazon’s adjusted close price over the years where we can see such noise:
"""

df_vwap['Fdi Transilvania'].plot(figsize = (10,6))

"""As we’re looking at daily data, there’s quite a bit of noise present. It would be nice if we could average this out by a week, which is where a rolling mean comes in. A rolling mean, or moving average, is a transformation method which helps average out noise from data. It works by simply splitting and aggregating the data into windows according to function, such as mean(), median(), count(), etc. For this example, we’ll use a rolling mean for 7 days."""

df_vwap.rolling(7).mean().head(10)

df_vwap['Fdi Transilvania'].plot()
df_vwap.rolling(window=30).mean()['Fdi Transilvania'].plot(figsize=(16, 6))

"""The blue line is the original open price data. The red line represents the 30-day rolling window, and has less noise than the orange line. Something to keep in mind is that once we run this code, the first 29 days aren’t going to have the blue line because there wasn’t enough data to actually calculate that rolling mean.

Conclusion
Python’s pandas library is a powerful, comprehensive library with a wide variety of inbuilt functions for analyzing time series data. In this article, we saw how pandas can be used for wrangling and visualizing time series data.

We also performed tasks like time sampling, time shifting and rolling with stock data. These are usually the first steps in analyzing any time series data. Going forward, we could use this data to perform a basic financial analysis by calculating the daily percentage change in stocks to get an idea about the volatility of stock prices. Another way we could use this data would be to predict Maruti’s stock prices for the next few days by employing machine learning techniques. This would be especially helpful from the shareholder’s point of view.
"""